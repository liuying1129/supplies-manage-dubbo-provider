<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.yklis</groupId>
	<artifactId>supplies-manage-dubbo-provider</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!-- 该部件maven独有,Gradle没有
	表示当前pom文件继承自spring-boot-starter-parent
	作用如下：
	1、默认使用Java 8
	2、源码编码方式UTF-8
	3、dependencies里的配置可以不用填写version，version会从spring-boot-dependencies得到继承
	4、识别过来资源过滤（Sensible resource filtering.）
	5、识别插件的配置（Sensible plugin configuration (exec plugin, surefire, Git commit ID, shade).）
	6、能够识别application.properties和application.yml类型的文件，同时也能支持profile-specific类型的文件（如： application-foo.properties and application-foo.yml，这个功能可以更好的配置不同生产环境下的配置文件)
	7、maven把默认的占位符${…​}改为了@..@ -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<dependencies>	    
        <dependency>
            <groupId>com.yklis</groupId>
            <artifactId>supplies-manage-interface</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

		<dependency>
			<!-- 依赖spring-boot-starter-jdbc -->
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>2.0.0</version>
		</dependency>
		
		<dependency>
		    <groupId>com.mchange</groupId>
		    <artifactId>c3p0</artifactId>
		    <version>0.9.5.3</version>
		</dependency>
		
		<dependency>
			<groupId>net.sourceforge.jtds</groupId>
			<artifactId>jtds</artifactId>
		</dependency>
		
		<!-- 解决报错:NoClassDefFoundError: javax/transaction/UserTransaction -->
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>	
		
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.5</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.11</version>
        </dependency>
        
		<!-- Netflix公司开源的zookeeper客户端 -->
		<!-- dubbo 2.6.5需要该ZK客户端支持,否则报错:NoClassDefFoundError: org/apache/curator/RetryPolicy -->
		<!-- dubbo 2.5.3版本则不需要 -->
		<dependency>
		    <groupId>org.apache.curator</groupId>
		    <artifactId>curator-framework</artifactId>
		    <version>4.1.0</version>
		</dependency>
		
		<!-- 注解配置方式需要该依赖 -->
		<dependency>
		    <groupId>com.alibaba.spring</groupId>
		    <artifactId>spring-context-support</artifactId>
		    <version>1.0.2</version>
		</dependency>
		
		<!-- 本地仓库工具库 -->
        <dependency>
            <groupId>com.yklis</groupId>
            <artifactId>LisFunction</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        
		<!-- 本地仓库工具库 -->
        <dependency>
            <groupId>com.yklis</groupId>
            <artifactId>LYFunction</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>		 		
	</dependencies>
	
	<build>	
		<!-- 如果不定义finalName，则生成的包名是artifactId-version.war -->
	    <!-- 定义finalName，则生成的包名是finalName.war -->
	    <finalName>supplies-manage-dubbo-provider</finalName>

		<plugins>
			<plugin>
				<!-- 该插件生成胖jar -->
				<!-- 运行springboot jar包的方法:java -jar jar包名称(含后缀.jar) -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
